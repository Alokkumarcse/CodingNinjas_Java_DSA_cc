Merge Sort - Problem Statement

Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 

//*****************************************************************************************************************

public class solution {

	public static void mergeSort(int[] input){
		// Write your code here
        if( input.length <= 1) return;
        int mid = input.length /2;
        
        // dividing input[] into two parts
        int arr1[] = new int[mid];
        int arr2[] = new int[input.length - mid];
        
        // copy all element from input[] till mid-1
        for(int i= 0; i<mid; i++){
            arr1[i] = input[i];
        }
        
        // copy all element from input[] till end
        int k = 0;
        for(int i= mid; i<input.length; i++){
            arr2[k] = input[i];
            k++;
        }
        
        // call merge Sort on the both arr1[] and arr2[] and then merge the arr1[] and arr2[] and store sorted element into input[]
        mergeSort(arr1);
        mergeSort(arr2);
        merge(arr1,arr2, input);
		
	}
    
    private static void merge(int arr1[], int arr2[], int output[]){
        int i = 0, j = 0, k = 0;
        while( i < arr1.length && j < arr2.length){
            if( arr1[i] <= arr2[j]){
                output[k] = arr1[i];
                i++;
            }else{
                output[k] = arr2[j];
                j++;
            }
            k++;
        }
        
        while( i< arr1.length ){
            output[k] = arr1[i];
            i++; k++;
        }
        while( j < arr2.length ){
            output[k] = arr2[j];
            j++; k++;
        }
    }
}

// tc = O(nlogn)
// sc = O(n) 
